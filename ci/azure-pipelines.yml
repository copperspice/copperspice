# available vmImages on azure pipelines:
# vs2017-win2016, windows-2019, ubuntu-18.04, ubuntu-16.04, macOS-10.14, macOS-10.13

trigger:
- master

jobs:
- job: msvc_2017_Release_x64
  timeoutInMinutes: 0
  pool:
    vmImage: vs2017-win2016
  steps:
  - script: |
      set
      mkdir release_x64
      mkdir logs
      pushd release_x64
      ::cmake -DWITH_WEBKIT=NO -G "Visual Studio 15 2017" -A x64 -T v141,host=x64 ..
      set Path=%ProgramFiles%\dotnet\;%WINDIR%;%WINDIR%\System32;%WINDIR%\System32\Wbem;%WINDIR%\System32\WindowsPowerShell\v1.0
      call "C:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" x64
      cmake -DWITH_WEBKIT=NO -G Ninja ..
      popd
    displayName: 'Configure CMake Generator for VS2017 x64 projects'
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '3.6'
  - script: python ci\pype.py logs\log_Core.txt -- cmake --build release_x64 --config Release --target CsCore --verbose
    displayName: 'Build Core'
  - script: python ci\pype.py logs\log_Network.txt -- cmake --build release_x64 --config Release --target CsNetwork --verbose
    displayName: 'Build Network'
  - script: python ci\pype.py logs\log_Xml.txt -- cmake --build release_x64 --config Release --target CsXml --verbose
    displayName: 'Build Xml'
  - script: python ci\pype.py logs\log_Gui.txt -- cmake --build release_x64 --config Release --target CsGui --verbose
    displayName: 'Build Gui'
  - script: python ci\pype.py logs\log_Svg.txt -- cmake --build release_x64 --config Release  --target CsSvg --verbose
    displayName: 'Build Svg'
  - script: python ci\pype.py logs\log_OpenGL.txt -- cmake --build release_x64 --config Release  --target CsOpenGL --verbose
    displayName: 'Build OpenGL'
  - script: python ci\pype.py logs\log_Multimedia.txt -- cmake --build release_x64 --config Release --target CsMultimedia --verbose
    displayName: 'Build Multimedia'
  - script: python ci\pype.py logs\log_Script.txt -- cmake --build release_x64 --config Release --target CsScript --verbose
    displayName: 'Build Script'
  - script: python ci\pype.py logs\log_Sql.txt -- cmake --build release_x64 --config Release --target CsSql --verbose
    displayName: 'Build Sql'
  - script: python ci\pype.py logs\log_XmlPatterns.txt -- cmake --build release_x64 --config Release --target CsXmlPatterns --verbose
    displayName: 'Build XmlPatterns'
  - script: python ci\pype.py logs\log_leftovers.txt -- cmake --build release_x64 --config Release --verbose
    displayName: 'Build leftovers'
  - publish: $(System.DefaultWorkingDirectory)/logs
    artifact: logs

- job: msvc_2019_Release_x64
  timeoutInMinutes: 0
  pool:
    vmImage: windows-latest
  steps:
  - script: |
      echo on
      set Path=%ProgramFiles%\dotnet\;%WINDIR%;%WINDIR%\System32;%WINDIR%\System32\Wbem;%WINDIR%\System32\WindowsPowerShell\v1.0
      call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" x64
      set
      mkdir logs
      mkdir release_x64
      pushd release_x64
      :: Ninja, works fine locally, but on azure pipelines is missing the standard library includes, I could not track down why.
      cmake -DWITH_WEBKIT=NO -DCMAKE_BUILD_TYPE=RelWithDebInfo -DCMAKE_C_COMPILER="cl.exe" -DCMAKE_CXX_COMPILER="cl.exe" -DMSVC_TOOLSET_VERSION=142 -G Ninja ..
      :: use the latest defaults
      ::cmake -DWITH_WEBKIT=NO -G "Visual Studio 16 2019" -A x64  ..
      popd
    displayName: 'Configure CMake Generator for VS2019 + Ninja'
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '3.6'
  - script: python ci\pype.py logs\log_Core.txt -- cmake --build release_x64 --config Release --target CsCore
    displayName: 'Build Core'
  - script: python ci\pype.py logs\log_Network.txt -- cmake --build release_x64 --config Release --target CsNetwork
    displayName: 'Build Network'
  - script: python ci\pype.py logs\log_Xml.txt -- cmake --build release_x64 --config Release --target CsXml
    displayName: 'Build Xml'
  - script: python ci\pype.py logs\log_Gui.txt -- cmake --build release_x64 --config Release --target CsGui
    displayName: 'Build Gui'
  - script: python ci\pype.py logs\log_Svg.txt -- cmake --build release_x64 --config Release  --target CsSvg
    displayName: 'Build Svg'
  - script: python ci\pype.py logs\log_OpenGL.txt -- cmake --build release_x64 --config Release  --target CsOpenGL
    displayName: 'Build OpenGL'
  - script: python ci\pype.py logs\log_Multimedia.txt -- cmake --build release_x64 --config Release --target CsMultimedia --verbose
    displayName: 'Build Multimedia'
  - script: python ci\pype.py logs\log_Script.txt -- cmake --build release_x64 --config Release --target CsScript --verbose
    displayName: 'Build Script'
  - script: python ci\pype.py logs\log_Sql.txt -- cmake --build release_x64 --config Release --target CsSql --verbose
    displayName: 'Build Sql'
  - script: python ci\pype.py logs\log_XmlPatterns.txt -- cmake --build release_x64 --config Release --target CsXmlPatterns --verbose
    displayName: 'Build XmlPatterns'
  - script: python ci\pype.py logs\log_leftovers.txt -- cmake --build release_x64 --config Release --verbose
    displayName: 'Build leftovers'
  - publish: $(System.DefaultWorkingDirectory)/logs
    artifact: logs

- job: Ubuntu_16_04_Release_x64
  timeoutInMinutes: 0
  pool:
    vmImage: Ubuntu-18.04
  steps:
  - script: |
      set
      sudo apt-get update
      sudo apt-get -yq install ninja-build libfreetype6-dev libfontconfig1-dev libglib2.0-dev libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev libice-dev libaudio-dev libgl1-mesa-dev libc6-dev libsm-dev libxcursor-dev libxext-dev libxfixes-dev libxi-dev libxinerama-dev libxrandr-dev libxrender-dev  libxt6 libx11-dev  libpulse-dev libasound2-dev  libxcb1-dev libx11-xcb-dev  libxcb-icccm4-dev libxcb-image0-dev libxcb-keysyms1-dev libxcb-render0-dev libxcb-render-util0-dev libxcb-randr0-dev libxcb-shape0-dev libxcb-shm0-dev libxcb-sync-dev libxcb-xfixes0-dev libxcb-xinerama0-dev libxkbcommon-dev libxkbcommon-x11-dev
      mkdir release_x64
      pushd release_x64
      cmake -G Ninja -DCMAKE_DISABLE_FIND_PACKAGE_OpenSSL=TRUE -DCMAKE_BUILD_TYPE=Release ..
      popd
    displayName: 'Configure CMake Generator for Ubuntu ninja'
  - script: |
      cmake --build release_x64 --target CsCore
    displayName: 'Build Core'
  - script: |
      cmake --build release_x64 --target CsNetwork
    displayName: 'Build Network'
  - script: |
      cmake --build release_x64 --target CsGui
    displayName: 'Build Gui'
  - script: |
      cmake --build release_x64 --target CsSvg
    displayName: 'Build Svg'
  - script: |
      cmake --build release_x64 --target CsOpenGL
    displayName: 'Build OpenGL'
  - script: |
      cmake --build release_x64 --target CsMultimedia
    displayName: 'Build Multimedia'
  - script: |
      cmake --build release_x64 --target CsScript
    displayName: 'Build Script'
  - script: |
      cmake --build release_x64 --target CsSql
    displayName: 'Build Sql'
  - script: |
      cmake --build release_x64 --target CsXml
    displayName: 'Build Xml'
  - script: |
      cmake --build release_x64 --target CsXmlPatterns
    displayName: 'Build XmlPatterns'
  - script: |
      cmake --build release_x64
    displayName: 'Build leftovers'

- job: macos_10_13_Release_x64
  timeoutInMinutes: 0
  pool:
    vmImage: macos-10.13
  steps:
  - script: |
      ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)" < /dev/null 2> /dev/null
      brew install ninja
    displayName: 'Prepare System'
  - script: |
      set
      set CMAKE_OSX_DEPLOYMENT_TARGET=10.13
      mkdir release_x64
      pushd release_x64
      cmake -G Ninja -DCMAKE_BUILD_TYPE=Release ..
      popd
    displayName: 'Configure CMake Generator for XCode 10.12'
  - script: |
      cmake --build release_x64 --target CsCore
    displayName: 'Build Core'
  - script: |
      cmake --build release_x64 --target CsNetwork
    displayName: 'Build Network'
  - script: |
      cmake --build release_x64 --target CsGui
    displayName: 'Build Gui'
  - script: |
      cmake --build release_x64 --target CsSvg
    displayName: 'Build Svg'
  - script: |
      cmake --build release_x64 --target CsOpenGL
    displayName: 'Build OpenGL'
  - script: |
      cmake --build release_x64 --target CsMultimedia
    displayName: 'Build Multimedia'
  - script: |
      cmake --build release_x64 --target CsScript
    displayName: 'Build Script'
  - script: |
      cmake --build release_x64 --target CsSql
    displayName: 'Build Sql'
  - script: |
      cmake --build release_x64 --target CsXml
    displayName: 'Build Xml'
  - script: |
      cmake --build release_x64 --target CsXmlPatterns
    displayName: 'Build XmlPatterns'
  - script: |
      cmake --build release_x64
    displayName: 'Build leftovers'

