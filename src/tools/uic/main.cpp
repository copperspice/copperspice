/***********************************************************************
*
* Copyright (c) 2012-2019 Barbara Geller
* Copyright (c) 2012-2019 Ansel Sermersheim
*
* Copyright (C) 2015 The Qt Company Ltd.
* Copyright (c) 2012-2016 Digia Plc and/or its subsidiary(-ies).
* Copyright (c) 2008-2012 Nokia Corporation and/or its subsidiary(-ies).
*
* This file is part of CopperSpice.
*
* CopperSpice is free software. You can redistribute it and/or
* modify it under the terms of the GNU Lesser General Public License
* version 2.1 as published by the Free Software Foundation.
*
* CopperSpice is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
*
* https://www.gnu.org/licenses/
*
***********************************************************************/

#define UIC_VERSION_STR "1.0.0"

#include "uic.h"
#include "option.h"
#include "driver.h"

#include <QtCore/QFile>
#include <QtCore/QDir>
#include <QtCore/QTextStream>
#include <QtCore/QTextCodec>

static const char *error = nullptr;

void showHelp(const char *appName)
{
   fprintf(stderr, "CopperSpice User Interface Compiler version %s\n", UIC_VERSION_STR);

   if (error) {
      fprintf(stderr, "%s: %s\n", appName, error);
   }

   fprintf(stderr, "Usage: %s [options] <uifile>\n\n"
           "  -h, -help                 display this help and exit\n"
           "  -v, -version              display version\n"
           "  -d, -dependencies         display the dependencies\n"
           "  -o <file>                 place the output into <file>\n"
           "  -tr <func>                use func() for i18n\n"
           "  -p, -no-protection        disable header protection\n"
           "  -n, -no-implicit-includes disable generation of #include-directives\n"
           "                            for forms generated by uic3\n"
           "  -g <name>                 change generator\n"
           "\n", appName);
}

int runUic(int argc, char *argv[])
{

   const char *fileName = 0;
   int arg = 1;
   Driver driver;

   while (arg < argc) {
      QString opt = QString::fromUtf8(argv[arg]);

      if (opt == QLatin1String("-h") || opt == "-help") {
         showHelp(argv[0]);
         return 0;

      } else if (opt == QLatin1String("-d") || opt == "-dependencies") {
         driver.option().dependencies = true;

      } else if (opt == QLatin1String("-v") || opt == "-version") {
         fprintf(stderr, "CopperSpice User Interface Compiler version %s\n", UIC_VERSION_STR);
         return 0;

      } else if (opt == QLatin1String("-o") || opt == QLatin1String("-output")) {
         ++arg;

         if (! argv[arg]) {
            showHelp(argv[0]);
            return 1;
         }
         driver.option().outputFile = QFile::decodeName(argv[arg]);

      } else if (opt == QLatin1String("-p") || opt == QLatin1String("-no-protection")) {
         driver.option().headerProtection = false;

      } else if (opt == QLatin1String("-n") || opt == QLatin1String("-no-implicit-includes")) {
         driver.option().implicitIncludes = false;

      } else if (opt == QLatin1String("-postfix")) {
         ++arg;

         if (! argv[arg]) {
            showHelp(argv[0]);
            return 1;
         }
         driver.option().postfix = QString::fromUtf8(argv[arg]);

      } else if (opt == QLatin1String("-tr") || opt == QLatin1String("-translate")) {
         ++arg;
         if (!argv[arg]) {
            showHelp(argv[0]);
            return 1;
         }

         driver.option().translateFunction = QString::fromUtf8(argv[arg]);

      } else if (opt == "-g" || opt == "-generator") {
         ++arg;

         if (! argv[arg]) {
            showHelp(argv[0]);
            return 1;
         }

         QString name = QString::fromUtf8(argv[arg]).toLower();
         driver.option().generator = (name == "java") ? Option::JavaGenerator : Option::CppGenerator;

      } else if (!fileName) {
         fileName = argv[arg];

      } else {
         showHelp(argv[0]);
         return 1;
      }

      ++arg;
   }

   QString inputFile;

   if (fileName) {
      inputFile = QString::fromUtf8(fileName);
   } else {
      driver.option().headerProtection = false;
   }

   if (driver.option().dependencies) {
      return ! driver.printDependencies(inputFile);
   }

   QTextStream *out = 0;
   QFile f;

   if (driver.option().outputFile.size()) {
      f.setFileName(driver.option().outputFile);

      if (! f.open(QIODevice::WriteOnly | QFile::Text)) {
         fprintf(stderr, "Could not create output file %s\n", csPrintable(f.errorString()));
         return 1;
      }

      out = new QTextStream(&f);
      out->setCodec(QTextCodec::codecForName("UTF-8"));
   }

   bool rtn = driver.uic(inputFile, out);
   delete out;

   if (! rtn) {
      if (driver.option().outputFile.size()) {
         f.close();
         f.remove();
      }

      fprintf(stderr, "File '%s' is not valid\n", inputFile.isEmpty() ? "<stdin>" : csPrintable(inputFile));
   }

   return !rtn;
}
int main(int argc, char *argv[])
{
   return runUic(argc, argv);
}
